version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.3.0
jobs:
  build:
    parallelism: 1
    working_directory: ~/openownership/register

    docker:

      - image: cimg/ruby:3.1.2
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          RAILS_ENV: test

      - image: mongo:4.4.1

      - image: docker.elastic.co/elasticsearch/elasticsearch:7.17.5
        environment:
          - 'discovery.type=single-node'
          - 'cluster.name=register-elasticsearch'
          - 'bootstrap.memory_lock=true'
          - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'

      - image: circleci/redis:4.0.9-alpine

    steps:

      - checkout

      - run:
          name: Swap node versions
          # Based on https://support.circleci.com/hc/en-us/articles/360051656632-Swap-node-version-on-CircleCI-convenience-image
          command: |
            set +e
            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            nvm install 18.12.1
            nvm alias default 18.12.1

            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver

      - run:
          name: Install yarn
          command: npm install --global yarn

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      - restore_cache:
          keys:
            - app-bundle-v3-{{ checksum "Gemfile.lock" }}

      - run:
          name: Bundle install
          command: bundle check || bundle install

      # Store bundle cache
      - save_cache:
          key: app-bundle-v3-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Restore yarn cache
      - restore_cache:
          keys:
            - app-yarn-v2-{{ checksum "yarn.lock" }}

      - run:
          name: Yarn Install
          command: yarn install --cache-folder ~/.cache/yarn

      # Store yarn / webpacker cache
      - save_cache:
          key: app-yarn-v2-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: Install python
          command: |
              sudo apt update
              sudo apt-get install python3-pip python3-venv

      # Restore pip cache
      - restore_cache:
          keys:
            - app-pip-v4-{{ checksum "requirements.txt" }}

      - run:
          name: 'Pip Install'
          command: |
              python3 -m venv venv
              source ./venv/bin/activate
              pip3 install wheel
              pip3 install -r requirements.txt
              deactivate

      # Store pip cache
      - save_cache:
          key: app-pip-v4-{{ checksum "requirements.txt" }}
          paths:
            - ./venv

      # Restore NER models cache
      - restore_cache:
          keys:
            - ua-edr-extractor-v2-{{ checksum "config/ua-edr-extractor.yml.erb" }}

      - run:
          name: Download NER models
          command: '[[ -f /home/circleci/openownership/test-models.tar.gz ]] || wget --output-document=/home/circleci/openownership/test-models.tar.gz --quiet https://oo-register-production.s3-eu-west-1.amazonaws.com/ner-models/test-models.tar.gz'


      # Store NER models cache
      - save_cache:
          key: ua-edr-extractor-v2-{{ checksum "config/ua-edr-extractor.yml.erb" }}
          paths:
            - /home/circleci/openownership/test-models.tar.gz

      - run:
          name: Wait for MongoDB
          command: dockerize -wait tcp://localhost:27017 -timeout 1m

      - run:
          name: Wait for ElasticSearch
          command: dockerize -wait tcp://localhost:9200 -timeout 1m

      - run:
          name: Wait for Redis
          command: dockerize -wait tcp://localhost:6379 -timeout 1m

      - run:
          command: bin/test
          environment:
            RAILS_ENV: test
            RACK_ENV: test
            UA_NER_MODELS: /home/circleci/openownership/test-models.tar.gz
